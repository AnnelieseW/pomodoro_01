{"version":3,"sources":["components/Setter/SetterInput.js","components/Setter/TimeSetter.js","components/Setter/RoundSetter.js","components/Display/Timer.js","components/Display/RoundDisplay.js","Main.js","App.js","serviceWorker.js","index.js"],"names":["SetterInput","props","handleChange","bind","state","val","e","this","onValChange","target","value","className","type","min","onChange","React","Component","TimeSetter","focusLength","studyChange","shortB","shortBChange","longB","longBChange","RoundSetter","setRounds","roundChange","setGoal","goalChange","Timer","timerButton","timeLeft","timer","seconds","Math","floor","slice","minutes","hours","timerOn","onClick","stop","start","id","RoundDisplay","totalRounds","currentRound","initialState","timeLeftS","currentType","viewSetter","Main","startTimer","setState","setInterval","updateTime","prevState","alert","stopTimer","clearInterval","setterOnClick","handleSetterOnclick","handleFocusChange","handleShortBChange","handleLongBChange","handleRoundChange","handleGoalChange","event","time","currentTye","rounds","setterDisplay","buttonDisplay","display","style","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"+TAwBeA,E,kDArBX,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IACDC,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKC,MAAQ,CACTC,IAAK,EAAKJ,MAAMI,KAJL,E,yDAQNC,GACTC,KAAKN,MAAMO,YAAYF,EAAEG,OAAOC,S,+BAKhC,IAAML,EAAME,KAAKN,MAAMI,IACvB,OACI,2BAAOM,UAAW,cAAeC,KAAK,SAASC,IAAI,IAAIH,MAAOL,EAAKS,SAAUP,KAAKL,mB,GAjBpEa,IAAMC,WCuBjBC,E,uKApBP,OACI,yBAAKN,UAAW,QACZ,yBAAKA,UAAW,WACZ,kBAAC,EAAD,CAAaN,IAAKE,KAAKN,MAAMiB,YAAaV,YAAaD,KAAKN,MAAMkB,cAClE,mDAEJ,yBAAKR,UAAW,WACZ,kBAAC,EAAD,CAAaN,IAAKE,KAAKN,MAAMmB,OAAQZ,YAAaD,KAAKN,MAAMoB,eAC7D,kDAEJ,yBAAKV,UAAW,WACZ,kBAAC,EAAD,CAAaN,IAAKE,KAAKN,MAAMqB,MAAOd,YAAcD,KAAKN,MAAMsB,cAC7D,sD,GAdKR,IAAMC,WCkBhBQ,E,uKAhBP,OACI,yBAAKb,UAAW,kBACZ,yBAAKA,UAAW,WACb,kBAAC,EAAD,CAAaN,IAAKE,KAAKN,MAAMwB,UAAWjB,YAAaD,KAAKN,MAAMyB,cAC/D,sCAEJ,yBAAKf,UAAW,WACZ,kBAAC,EAAD,CAAaN,IAAKE,KAAKN,MAAM0B,QAASnB,YAAaD,KAAKN,MAAM2B,aAC9D,yC,GAVMb,IAAMC,WCwBjBa,G,6KAvBP,IAMIC,EANEC,EAAWxB,KAAKN,MAAM+B,MAExBC,GAAW,IAAOC,KAAKC,MAAOJ,EAAU,IAAQ,IAAM,IAAKK,OAAO,GAClEC,GAAW,IAAMH,KAAKC,MAAOJ,EAAU,IAAS,KAAKK,OAAO,GAC5DE,EAASJ,KAAKC,MAAOJ,EAAS,KAAU,IAQ5C,OAJID,EADAvB,KAAKN,MAAMsC,QACI,4BAAQC,QAASjC,KAAKN,MAAMwC,MAA5B,QAEF,4BAAQD,QAASjC,KAAKN,MAAMyC,OAA5B,SAGb,yBAAKC,GAAG,SACJ,yBAAKA,GAAG,YACJ,4BAAe,IAAVL,EAAaA,EAAO,IAAM,GAA/B,IAAoCD,EAApC,MAAgDJ,IAEnDH,O,GAnBGf,IAAMC,YCmBX4B,E,uKAjBP,IAAMC,EAActC,KAAKN,MAAM6C,aACzBrB,EAAYlB,KAAKN,MAAMwB,UAEzBqB,EAAeD,EAAcpB,EACjC,OACI,yBAAKd,UAAW,kBACZ,yBAAKA,UAAW,WACZ,gCAAMmC,EAAN,MAAuBrB,EAAvB,MAEJ,yBAAKd,UAAW,WACZ,gCAAMkC,EAAN,MAAsBtC,KAAKN,MAAM0B,QAAjC,W,GAZOZ,IAAMC,WCQ3B+B,G,MAAe,CACjBC,UAAY,KACZT,SAAS,EACTrB,YAAc,GACdE,OAAS,EACTE,MAAQ,GACRG,UAAW,EACXE,QAAU,GACVmB,aAAc,EAEdG,YAAa,QACbC,YAAY,IA4JDC,E,kDAvJX,WAAYlD,GAAQ,IAAD,8BACf,cAAMA,IAaVmD,WAAa,WACT,EAAKC,SAAS,CAACd,SAAS,IACxB,EAAKP,MAAQsB,aAAY,WACrB,IAAMC,EAAa,EAAKnD,MAAM4C,UAAY,IACtCO,GAAc,EACd,EAAKF,SAAS,CACVL,UAAYO,IAEe,UAA3B,EAAKnD,MAAM6C,aACP,EAAK7C,MAAMqB,UAAa,EAAKrB,MAAM0C,aAAe,EAAKrB,YAAe,EACtE,EAAK4B,SAAS,CACVL,UAA8B,IAAnB,EAAK5C,MAAMkB,MACtB2B,YAAa,SAGjB,EAAKI,SAAS,CACVL,UAA+B,IAApB,EAAK5C,MAAMgB,OACtB6B,YAAa,UAGrB,EAAKI,UAAS,SAAAG,GAAS,MAAK,CACxBV,aAAcU,EAAUV,aAAe,MAG3CW,MAAM,gBAEN,EAAKJ,SAAS,CACVJ,YAAY,QACZD,UAAoC,IAAzB,EAAK5C,MAAMc,cAE1BuC,MAAM,mBAGf,MA/CY,EAkDnBC,UAAY,WACRC,cAAc,EAAK3B,OACnB,EAAKqB,SAAS,CAACd,SAAS,KAlDxB,EAAKnC,MAAQ2C,EACb,EAAKK,WAAa,EAAKA,WAAWjD,KAAhB,gBAClB,EAAKuD,UAAY,EAAKA,UAAUvD,KAAf,gBACjB,EAAKyD,cAAc,EAAKA,cAAczD,KAAnB,gBACnB,EAAK0D,oBAAoB,EAAKA,oBAAoB1D,KAAzB,gBACzB,EAAK2D,kBAAmB,EAAKA,kBAAkB3D,KAAvB,gBACxB,EAAK4D,mBAAqB,EAAKA,mBAAmB5D,KAAxB,gBAC1B,EAAK6D,kBAAoB,EAAKA,kBAAkB7D,KAAvB,gBACzB,EAAK8D,kBAAkB,EAAKA,kBAAkB9D,KAAvB,gBACvB,EAAK+D,iBAAiB,EAAKA,iBAAiB/D,KAAtB,gBAXP,E,4DAwDfI,KAAK8C,UAAS,SAAAG,GAAS,MAAI,CACvBN,YAAaM,EAAUN,iB,0CAIXiB,GACZ5D,KAAKH,MAAM8C,WACX3C,KAAK6C,aAEL7C,KAAKmD,YAETnD,KAAK8C,UAAS,SAAAG,GAAS,MAAI,CACvBN,YAAaM,EAAUN,iB,wCAIbkB,GACd7D,KAAK8C,SAAS,CAACnC,YAAakD,IACG,UAA3B7D,KAAKH,MAAM6C,aACX1C,KAAK8C,SAAS,CAACL,UAAkB,IAAPoB,M,yCAIfA,GACf7D,KAAK8C,SAAS,CAACjC,OAAQgD,IACQ,UAA3B7D,KAAKH,MAAM6C,aACX1C,KAAK8C,SAAS,CAACL,UAAkB,IAAPoB,M,wCAIhBA,GACd7D,KAAK8C,SAAS,CAAC/B,MAAO8C,IACQ,SAA1B7D,KAAKH,MAAMiE,YACX9D,KAAK8C,SAAS,CAACL,UAAkB,IAAPoB,M,wCAIhBE,GACd/D,KAAK8C,SAAS,CAAC5B,UAAW6C,M,uCAGbA,GACb/D,KAAK8C,SAAS,CAAC1B,QAAQ2C,M,+BAIvB,IAAIC,EAAeC,EAanB,OAXKjE,KAAKH,MAAM8C,WAKZsB,EAAe,CACXC,QAAS,QALbF,EAAgB,CACZE,QAAS,QAUb,6BACI,yBAAK9B,GAAI,UACL,4BAAQA,GAAI,eACJhC,UAAW,eACX6B,QAASjC,KAAKsD,oBACda,MAAOF,GAHf,YAMA,yBAAK7B,GAAI,UAAW+B,MAAOH,GACvB,6BACI,kBAAC,EAAD,CAAa9C,UAAWlB,KAAKH,MAAMqB,UAAWC,YAAanB,KAAK0D,kBACnDtC,QAASpB,KAAKH,MAAMuB,QAASC,WAAYrB,KAAK2D,mBAC3D,kBAAC,EAAD,CAAYhD,YAAaX,KAAKH,MAAMc,YAAaC,YAAaZ,KAAKuD,kBACvD1C,OAAUb,KAAKH,MAAMgB,OAAQC,aAAcd,KAAKwD,mBAChDzC,MAASf,KAAKH,MAAMkB,MAAOC,YAAahB,KAAKyD,oBACzD,4BAAQrD,UAAW,eAAgB6B,QAASjC,KAAKsD,qBAAjD,kBAMZ,yBAAKlB,GAAI,WACD,kBAAC,EAAD,CAAOX,MAASzB,KAAKH,MAAM4C,UACpBN,MAAOnC,KAAK6C,WAAYX,KAAMlC,KAAKmD,UACnCnB,QAAShC,KAAKH,MAAMmC,UAC3B,kBAAC,EAAD,CAAcO,aAAcvC,KAAKH,MAAM0C,aACzBrB,UAAalB,KAAKH,MAAMqB,UACxBE,QAAWpB,KAAKH,MAAMuB,gB,GAjJzCZ,IAAMC,WCXV2D,MARf,WACE,OACE,yBAAKhE,UAAU,OACb,kBAAC,EAAD,QCIciE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.215888d3.chunk.js","sourcesContent":["import React from 'react'\n\nclass SetterInput extends React.Component {\n    constructor(props) {\n        super(props);\n        this.handleChange = this.handleChange.bind(this);\n        this.state = {\n            val: this.props.val\n        };\n    }\n\n    handleChange(e) {\n        this.props.onValChange(e.target.value);\n    }\n\n\n    render() {\n        const val = this.props.val;\n        return (\n            <input className={'setterInput'} type='number' min=\"0\" value={val} onChange={this.handleChange}/>\n        )\n    }\n}\n\nexport default SetterInput;\n","import React from \"react\";\nimport SetterInput from \"./SetterInput\";\n\nclass TimeSetter extends React.Component {\n    render() {\n        return(\n            <div className={'flex'}>\n                <div className={'i-block'}>\n                    <SetterInput val={this.props.focusLength} onValChange={this.props.studyChange}/>\n                    <p>focus length (mins)</p>\n                </div>\n                <div className={'i-block'}>\n                    <SetterInput val={this.props.shortB} onValChange={this.props.shortBChange}/>\n                    <p>short break (mins)</p>\n                </div>\n                <div className={'i-block'}>\n                    <SetterInput val={this.props.longB} onValChange ={this.props.longBChange}/>\n                    <p>long break (mins)</p>\n                </div>\n\n            </div>\n        )\n    }\n}\n\nexport default TimeSetter\n","import React from \"react\";\nimport SetterInput from \"./SetterInput\";\n\nclass RoundSetter extends React.Component {\n    render() {\n        return(\n            <div className={'flex-container'}>\n                <div className={'i-block'}>\n                   <SetterInput val={this.props.setRounds} onValChange={this.props.roundChange}/>\n                    <p>rounds</p>\n                </div>\n                <div className={'i-block'}>\n                    <SetterInput val={this.props.setGoal} onValChange={this.props.goalChange}/>\n                    <p>goal</p>\n                </div>\n            </div>\n        )\n    }\n\n}\n\nexport default RoundSetter;","import React from \"react\";\n\nclass Timer extends React.Component{\n    render() {\n        const timeLeft = this.props.timer;\n\n        let seconds = (\"0\" + (Math.floor((timeLeft/ 1000) % 60) % 60)).slice(-2);\n        let minutes = (\"0\" + Math.floor((timeLeft/ 60000) % 60)).slice(-2);\n        let hours = (Math.floor((timeLeft/3600000)% 60));\n\n        let timerButton;\n        if (this.props.timerOn){\n            timerButton =  <button onClick={this.props.stop}>stop</button>\n        } else {\n            timerButton= <button onClick={this.props.start}>start</button>\n        }\n        return(\n            <div id=\"timer\">\n                <div id=\"timeLeft\">\n                    <h1>{hours !== 0? hours +\":\" : \"\"} {minutes} : {seconds}</h1>\n                </div>\n                {timerButton}\n            </div>\n        )\n    }\n}\n\nexport default Timer","import React from \"react\";\n\nclass RoundDisplay extends React.Component{\n    render(){\n        const totalRounds = this.props.currentRound;\n        const setRounds = this.props.setRounds;\n\n        let currentRound =(totalRounds % setRounds);\n        return(\n            <div className={'flex-container'}>\n                <div className={'i-block'}>\n                    <h2> {currentRound} / {setRounds} </h2>\n                </div>\n                <div className={'i-block'}>\n                    <h2> {totalRounds} / {this.props.setGoal} </h2>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default RoundDisplay;","import React from \"react\";\n\nimport TimeSetter from \"./components/Setter/TimeSetter\";\nimport RoundSetter from \"./components/Setter/RoundSetter\";\nimport './components/Setter/Setter.css'\n\nimport Timer from \"./components/Display/Timer\";\nimport RoundDisplay from \"./components/Display/RoundDisplay\";\nimport './components/Display/display.css'\n\nconst initialState = {\n    timeLeftS : 1500000,\n    timerOn: false,\n    focusLength : 25,\n    shortB : 5,\n    longB : 30,\n    setRounds: 4,\n    setGoal : 12,\n    currentRound: 0,\n    // currentType one of : 'study' , 'long', 'short'\n    currentType: 'study',\n    viewSetter: true\n};\n\nclass Main extends React.Component{\n\n    constructor(props) {\n        super(props);\n        this.state = initialState;\n        this.startTimer = this.startTimer.bind(this);\n        this.stopTimer = this.stopTimer.bind(this);\n        this.setterOnClick=this.setterOnClick.bind(this);\n        this.handleSetterOnclick=this.handleSetterOnclick.bind(this);\n        this.handleFocusChange= this.handleFocusChange.bind(this);\n        this.handleShortBChange = this.handleShortBChange.bind(this);\n        this.handleLongBChange = this.handleLongBChange.bind(this);\n        this.handleRoundChange=this.handleRoundChange.bind(this);\n        this.handleGoalChange=this.handleGoalChange.bind(this);\n    }\n\n    startTimer = () => {\n        this.setState({timerOn: true});\n        this.timer = setInterval(()=> {\n            const updateTime = this.state.timeLeftS - 1000;\n            if (updateTime >= 0) {\n                this.setState({\n                    timeLeftS : updateTime})\n            } else {\n                if (this.state.currentType === 'study') {\n                    if (this.state.setRounds - (this.state.currentRound % this.setRounds) === 1) {\n                        this.setState({\n                            timeLeftS: this.state.longB * 60000,\n                            currentType: 'long'\n                        })\n                    } else {\n                        this.setState({\n                            timeLeftS: this.state.shortB * 60000,\n                            currentType: 'short'\n                        })\n                    }\n                    this.setState(prevState => ({\n                        currentRound: prevState.currentRound + 1\n\n                    }));\n                    alert(\"Break Time\")\n                } else {\n                    this.setState({\n                        currentType:'study',\n                        timeLeftS: this.state.focusLength * 60000\n                    });\n                    alert(\"Back To Work\")\n                }\n            }\n        }, 1000)\n    };\n\n    stopTimer = () => {\n        clearInterval(this.timer);\n        this.setState({timerOn: false})\n    };\n\n    setterOnClick(){\n        this.setState(prevState =>({\n            viewSetter: !prevState.viewSetter\n        }));\n    }\n\n    handleSetterOnclick(event){\n        if (this.state.viewSetter){\n            this.startTimer()\n        } else {\n            this.stopTimer()\n        }\n        this.setState(prevState =>({\n            viewSetter: !prevState.viewSetter\n        }));\n    }\n\n    handleFocusChange(time){\n        this.setState({focusLength: time});\n        if (this.state.currentType === 'study') {\n            this.setState({timeLeftS: time * 60000})\n        }\n    }\n\n    handleShortBChange(time){\n        this.setState({shortB: time});\n        if (this.state.currentType === 'short') {\n            this.setState({timeLeftS: time * 60000})\n        }\n    }\n\n    handleLongBChange(time){\n        this.setState({longB: time});\n        if (this.state.currentTye === 'long') {\n            this.setState({timeLeftS: time * 60000})\n        }\n    }\n\n    handleRoundChange(rounds){\n        this.setState({setRounds: rounds})\n    }\n\n    handleGoalChange(rounds){\n        this.setState({setGoal:rounds})\n    }\n\n    render() {\n        let setterDisplay, buttonDisplay;\n\n        if (!this.state.viewSetter) {\n            setterDisplay = {\n                display: 'none'\n            }\n        } else {\n            buttonDisplay ={\n                display: 'none',\n            }\n        }\n\n\n        return(\n            <div>\n                <div id={'setter'}>\n                    <button id={'setterButton'}\n                            className={'toggleButton'}\n                            onClick={this.handleSetterOnclick}\n                            style={buttonDisplay}>\n                        Settings\n                    </button>\n                    <div id={'display'} style={setterDisplay}>\n                        <div>\n                            <RoundSetter setRounds={this.state.setRounds} roundChange={this.handleRoundChange}\n                                         setGoal={this.state.setGoal} goalChange={this.handleGoalChange}/>\n                            <TimeSetter focusLength={this.state.focusLength} studyChange={this.handleFocusChange}\n                                        shortB = {this.state.shortB} shortBChange={this.handleShortBChange}\n                                        longB = {this.state.longB} longBChange={this.handleLongBChange}/>\n                            <button className={'toggleButton'} onClick={this.handleSetterOnclick}>\n                                Start Timer\n                            </button>\n                        </div>\n                    </div>\n                </div>\n                <div id={'display'}>\n                        <Timer timer = {this.state.timeLeftS}\n                               start={this.startTimer} stop={this.stopTimer}\n                               timerOn={this.state.timerOn}/>\n                        <RoundDisplay currentRound={this.state.currentRound}\n                                      setRounds = {this.state.setRounds}\n                                      setGoal = {this.state.setGoal} />\n                </div>\n            </div>\n        )\n    }\n\n}\n\nexport default Main","import React from 'react';\nimport './App.css';\n\nimport Main from \"./Main\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Main/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}